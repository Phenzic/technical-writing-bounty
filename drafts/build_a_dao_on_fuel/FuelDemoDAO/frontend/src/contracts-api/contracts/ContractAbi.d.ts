/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.79.0
  Forc version: 0.49.3
  Fuel-Core version: 0.22.1
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Enum } from "./common";

export enum CreationErrorInput { DurationCannotBeZero = 'DurationCannotBeZero', InvalidAcceptancePercentage = 'InvalidAcceptancePercentage' };
export enum CreationErrorOutput { DurationCannotBeZero = 'DurationCannotBeZero', InvalidAcceptancePercentage = 'InvalidAcceptancePercentage' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum InitializationErrorInput { CannotReinitialize = 'CannotReinitialize', ContractNotInitialized = 'ContractNotInitialized' };
export enum InitializationErrorOutput { CannotReinitialize = 'CannotReinitialize', ContractNotInitialized = 'ContractNotInitialized' };
export enum ProposalErrorInput { InsufficientApprovals = 'InsufficientApprovals', ProposalExecuted = 'ProposalExecuted', ProposalExpired = 'ProposalExpired', ProposalStillActive = 'ProposalStillActive' };
export enum ProposalErrorOutput { InsufficientApprovals = 'InsufficientApprovals', ProposalExecuted = 'ProposalExecuted', ProposalExpired = 'ProposalExpired', ProposalStillActive = 'ProposalStillActive' };
export enum UserErrorInput { AmountCannotBeZero = 'AmountCannotBeZero', IncorrectAssetSent = 'IncorrectAssetSent', InsufficientBalance = 'InsufficientBalance', InvalidId = 'InvalidId', VoteAmountCannotBeZero = 'VoteAmountCannotBeZero' };
export enum UserErrorOutput { AmountCannotBeZero = 'AmountCannotBeZero', IncorrectAssetSent = 'IncorrectAssetSent', InsufficientBalance = 'InsufficientBalance', InvalidId = 'InvalidId', VoteAmountCannotBeZero = 'VoteAmountCannotBeZero' };

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { value: string };
export type AssetIdOutput = AssetIdInput;
export type CallDataInput = { arguments: BigNumberish, function_selector: BigNumberish, id: ContractIdInput };
export type CallDataOutput = { arguments: BN, function_selector: BN, id: ContractIdOutput };
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type CreateProposalEventInput = { id: BigNumberish, proposal_info: ProposalInfoInput };
export type CreateProposalEventOutput = { id: BN, proposal_info: ProposalInfoOutput };
export type DepositEventInput = { amount: BigNumberish, user: IdentityInput };
export type DepositEventOutput = { amount: BN, user: IdentityOutput };
export type ExecuteEventInput = { acceptance_percentage: BigNumberish, id: BigNumberish, user: IdentityInput };
export type ExecuteEventOutput = { acceptance_percentage: BN, id: BN, user: IdentityOutput };
export type InitializeEventInput = { author: IdentityInput, asset: AssetIdInput };
export type InitializeEventOutput = { author: IdentityOutput, asset: AssetIdOutput };
export type ProposalInput = { amount: BigNumberish, asset: AssetIdInput, call_data: CallDataInput, gas: BigNumberish };
export type ProposalOutput = { amount: BN, asset: AssetIdOutput, call_data: CallDataOutput, gas: BN };
export type ProposalInfoInput = { acceptance_percentage: BigNumberish, author: IdentityInput, deadline: BigNumberish, executed: boolean, no_votes: BigNumberish, proposal_transaction: ProposalInput, yes_votes: BigNumberish };
export type ProposalInfoOutput = { acceptance_percentage: BN, author: IdentityOutput, deadline: BN, executed: boolean, no_votes: BN, proposal_transaction: ProposalOutput, yes_votes: BN };
export type UnlockVotesEventInput = { id: BigNumberish, user: IdentityInput, vote_amount: BigNumberish };
export type UnlockVotesEventOutput = { id: BN, user: IdentityOutput, vote_amount: BN };
export type VoteEventInput = { id: BigNumberish, user: IdentityInput, vote_amount: BigNumberish };
export type VoteEventOutput = { id: BN, user: IdentityOutput, vote_amount: BN };
export type VotesInput = { no_votes: BigNumberish, yes_votes: BigNumberish };
export type VotesOutput = { no_votes: BN, yes_votes: BN };
export type WithdrawEventInput = { amount: BigNumberish, user: IdentityInput };
export type WithdrawEventOutput = { amount: BN, user: IdentityOutput };

interface ContractAbiInterface extends Interface {
  functions: {
    constructor: FunctionFragment;
    create_proposal: FunctionFragment;
    deposit: FunctionFragment;
    execute: FunctionFragment;
    unlock_votes: FunctionFragment;
    vote: FunctionFragment;
    withdraw: FunctionFragment;
    balance: FunctionFragment;
    governance_asset_id: FunctionFragment;
    proposal: FunctionFragment;
    proposal_count: FunctionFragment;
    user_balance: FunctionFragment;
    user_votes: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'constructor', values: [AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'create_proposal', values: [BigNumberish, BigNumberish, ProposalInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'deposit', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'execute', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'unlock_votes', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'vote', values: [boolean, BigNumberish, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'balance', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'governance_asset_id', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'proposal', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'proposal_count', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'user_balance', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'user_votes', values: [BigNumberish, IdentityInput]): Uint8Array;

  decodeFunctionData(functionFragment: 'constructor', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'create_proposal', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'deposit', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'execute', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'unlock_votes', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'vote', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'withdraw', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'balance', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'governance_asset_id', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'proposal', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'proposal_count', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'user_balance', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'user_votes', data: BytesLike): DecodedValue;
}

export class ContractAbi extends Contract {
  interface: ContractAbiInterface;
  functions: {
    constructor: InvokeFunction<[asset: AssetIdInput], void>;
    create_proposal: InvokeFunction<[acceptance_percentage: BigNumberish, duration: BigNumberish, proposal_transaction: ProposalInput], void>;
    deposit: InvokeFunction<[], void>;
    execute: InvokeFunction<[proposal_id: BigNumberish], void>;
    unlock_votes: InvokeFunction<[proposal_id: BigNumberish], void>;
    vote: InvokeFunction<[approve: boolean, proposal_id: BigNumberish, vote_amount: BigNumberish], void>;
    withdraw: InvokeFunction<[amount: BigNumberish], void>;
    balance: InvokeFunction<[], BN>;
    governance_asset_id: InvokeFunction<[], AssetIdOutput>;
    proposal: InvokeFunction<[proposal_id: BigNumberish], ProposalInfoOutput>;
    proposal_count: InvokeFunction<[], BN>;
    user_balance: InvokeFunction<[user: IdentityInput], BN>;
    user_votes: InvokeFunction<[proposal_id: BigNumberish, user: IdentityInput], VotesOutput>;
  };
}
